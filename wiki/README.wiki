#labels Featured
 == OESS - Open Exchange Software Suite ==

==1. What is OESS==

OESS is a set of software which can be used to configure and control dynamic (user-controlled) layer 2 virtual circuit (VLAN) networks using OpenFlow Enabled switches.  OESS provides sub-second circuit provisioning, automatic circuit failover, per-interface permissions, and automatic per-VLAN statistics.  It includes simple and user friendly web-based user interface as well as a web services API.


==2. Requirements==

OESS requires several packages to work. The core is built on Apache and MySQL,
though there are several other packages needed. A RedHat 6 box with EPEL repositories enabled (http://fedoraproject.org/wiki/EPEL) should have all of the dependencies to install OESS. 

If you are not using the RPM installation method, please refer to the Requires section in the specfiles for a full listing of what is required:
oess-core.spec
oess-frontend.spec
nox.spec

==3. Installation==

**NOTE: Before running /usr/bin/oess_setup you must have MySQL running, and know the administrator (root) password

OESS is easy to setup with the provided oess_setup.pl script.  This script
(installed in /usr/bin/oess_setup.pl via RPM) takes a user step by step to
get a base OESS configuration up and running.  Once the base installation is
complete the rest of the configuration is done through the Administrator 
Interface located at http://<your machine>/oess/admin/admin_index.cgi by default.  This UI
allows for the creation of new users, the acceptance of newly discovered nodes and links, and the setup and configuration of workgroups.

To start the OESS services, there is an init script /etc/init.d/oess that should
start all of the individual pieces of OESS in the proper order.

OESS requires the following ports opened to be able to function properly:
6633 - OpenFlow protocol
443/80  - Apache/SSL

==4. Administration==

The Admin UI provides the ability to control almost every aspect of the OESS 
software including users, workgroups, ports, nodes, and links. Any 
user that can reach the administrative UI can make any changes, so it is recommended that it
be locked down through use of a different HTPASSWD file
or a different authentication mechanism.  Once this is done, users can be 
added and put into workgroups.  The workgroups allow permissions to be assigned
to users as groups instead of individuals.  This way an entity can have multiple
people with the same permissions.  Workgroups are given access to individual 
interfaces on devices. Any workgroup can provision over trunk interfaces.

Once a user and workgroup are configured, the network devices need to be approved.
This discovery process depends on the network devices being configured to talk to the openflow
controller.  If the devices are talking to the controller
then they will appear in the Discovery section of the admin UI.  Clicking a row under the devices table allows the user to set the device name as well as a latitude and longitude for geographic visualization.  Once the device is confirmed, any links detected between other 
confirmed devices will appear in the links table.  Select a row in the links table
to approve a link for usage.  Once all of the devices and links have been confirmed
the available non-trunk interfaces for the devices will appear as options under the "Add Edge Port" section of a workgroup for assignment.  Add any ports to the workgroup to allow that group to provision circuits through them.

==5. Configuration==

*IF YOU RAN THE oess_setup.pl SCRIPT SKIP THIS SECTION!*

If you do not use the oess_setup.pl script, it is recommended that you use the included VM image of a pre-staged OESS installation. See the Links section of http://code.google.com/p/nddi/ for a link to the most recent image. Otherwise, manual configuration must occur.

First you need a mysql instance running. Create an OESS mysql user
and set the password. Finally, create the database named "oess" and grant all permissions
on this database to the oess user.

Once the OESS user is installed and granted privileges on the OESS Database,
you can now install the schema.  The schema will be located with the OESS::Database
perl module and is called "nddi.sql".  Import the schema into the oess database created above.

Once the OESS schema is installed, you need to set a local network/domain.  This needs to be inserted into the network table, and 
the is_local bit needs to be set to 1.

At this point in time the OESS database is all set, but the OESS configuration is not done.
The configuration file that contains the database connection information needs to be located in /etc/oess/database.xml. This configuration file should contain all of the information on how to connect to the mysql database, as well as any oscars 
configuration details.  The config file should look like this (replace with real values):

<config version="0.1" snapp_config_location="/SNMP/snapp/snapp_config.xml">
  <credentials type="mysql" database="oess" username="oess-rw" password="secret"></credentials>
  <oscars host="https://localhost" cert="/path/to/mycert.crt" key="/path/to/mykey.key" 
  topo="http://ndb7.net.internet2.edu:8012/perfSONAR_PS/services/topology"/>
</config>

At this point OESS is configured, but the services have not been started. Please note that it is important to start the services in the correct order.

Topology Service - /path/to/topo.pl -d
Stats Service - /path/to/vlan_stats_d.pl
NOX Service - cd /path/to/nox_core; ./nox_core -d -i ptcp:<port, default 6633> nddi_dbus 
Forwarding Control Service - /path/to/fwdctl.pl -d
Syslogger Service - /path/to/syslogger.pl


==6. Banana==
{{{
 _
//\
V  \
 \  \_
  \,'.`-.
   |\ `. `.       
   ( \  `. `-.                        _,.-:\
    \ \   `.  `-._             __..--' ,-';/
     \ `.   `-.   `-..___..---'   _.--' ,'/
      `. `.    `-._        __..--'    ,' /
        `. `-_     ``--..''       _.-' ,'
          `-_ `-.___        __,--'   ,'
             `-.__  `----"""    __.-'
                  `--..____..--' _

}}}
==7. Where to go for Help==
nddi-users@internet2.edu

==8. Downloading the Code==
http://code.google.com/p/nddi/downloads

==9. Known Supported Devices==

-NEC Rack switch model G8264

The software should work with any OpenFlow 1.0 compliant switch. See http://code.google.com/p/nddi/wiki/SwitchRequirements for a list of all the switch requirements for OESS to function properly.

==10. OSCARS (IDC)==

(Our RPM of OSCARS 0.6.0 is available at http://noc.net.internet2.edu/oscars-0.6.0-3.noarch.rpm)

OESS only works with OSCARS 0.6.  An OSCARS distribution that has been tested
to work with OESS is included with this distribution.  Configuring OSCARS is 
covered in the OSCARS documentation.  Configuring OESS to work with OSCARS is 
covered below.

Presuming you have an OSCARS 0.6 instance setup and running, it is simple
to import all of the remote topologies into your OESS instance.  A script called
populate_remote_information.pl pulls down topology from the configured Topology
Service and populates the node and interface data into the Database.  This is
then used when provisioning Interdomain circuits in OESS.  To configure remote
links to other networks in OESS, use the Administration UI and select the Remote
Links tab.  To add a new Link, first select the node, then pick the local
interface the remote link is on.  At this point you will get a popup that ask for the
name and the remote urn.  The name will be the name for the link in your topology
that will be submitted to the Topology service.  The remote URN should be the remote
IDCs endpoint which this port connects to.  When you are done adding remote links
click the submit topology button, to submit your topology to your configured 
Topology Service. You should then restart the OSCARS service.

At this point if you have a peering up, you should be able to do interdomain circuits.

==11. Testing with MiniNet==

If you want to test and play with OESS but do not have any OpenFlow capable switches
then MiniNet is for you.  MiniNet provides software defined OpenFlow switches that
can process flow rules and pass traffic between a definable topology. Explained below
is how to get mininet distributed as a VM, how to create a custom topology, and how to start
mininet with this custom topology pointed at your OESS instance.

MiniNet can be obtained at http://yuba.stanford.edu/foswiki/bin/view/OpenFlow/MininetGettingStarted. It is recommended that you choose the VM option as it is the easiest to get going with. Once the VM has been downloaded, launch it using your preferred virtualization program such as VMware, VirtualBox, etc.

The remaining instructions assume that the VM option has been chosen. If Mininet was manually installed, be sure to adjust any paths to suit where it is located.

Log into the MiniNet host as the "openflow" user and create a topology file in "/home/openflow/mininet/custom/oess.py" as follows (note that since this is Python, white space / indentation is important):

from mininet.topo import Topo, Node

class MyTopo( Topo ):
   "Simple topology example."

   def __init__( self, enable_all = True ):
       "Create custom topo."

       # Add default members to class.                                                                                                                                                                                                                                      
       super( MyTopo, self ).__init__()

       # Set Node IDs for hosts and switches                                                                                                                                                                                                                                
       northSwitch = 1
       southSwitch = 2
       eastSwitch  = 3
       westSwitch  = 4

       eastHost  = 5
       westHost  = 6
       northHost = 7

       # Add nodes                                                                                                                                                                                                                                                           
       self.add_node( northSwitch, Node( is_switch=True ) )
       self.add_node( southSwitch, Node( is_switch=True ) )
       self.add_node( eastSwitch,  Node( is_switch=True ) )
       self.add_node( westSwitch,  Node( is_switch=True ) )

       self.add_node( eastHost,    Node( is_switch=False ) )
       self.add_node( westHost,   Node( is_switch=False ) )
       self.add_node( northHost,   Node( is_switch=False ) )

       # Add edges                                                                                                                                                                                                                                                           
       self.add_edge( eastSwitch, northSwitch )
       self.add_edge( eastSwitch, southSwitch )
       self.add_edge( westSwitch, northSwitch )
       self.add_edge( westSwitch, southSwitch )
       #self.add_edge( northSwitch, southSwitch )                                                                                                                                                                                                                           
       self.add_edge( eastSwitch, eastHost )
       self.add_edge( westSwitch, westHost )
       self.add_edge( northSwitch, northHost )

       # Consider all switches and hosts 'on'                                                                                                                                                                                                                               
       self.enable_all()

topos = { 'oess_example': ( lambda: MyTopo() ) }

and then run the following command:

cd /home/openflow/mininet; sudo mn --controller remote --ip <ip address of controller host> --custom ./custom/oess.py --topo oess_example --port=<port controller is listening on, default 6633>

At this point MiniNet should be up and running and talking to your OESS instance. If everything is set up properly you should see some new nodes showing up in the OESS Admin section (note: you will need to reload the page). If you do not see any nodes showing up and this is your first time using MiniNet, be sure to check that the proper ports are opened and that OESS is running.

==11. License==


Copyright 2011 Trustees of Indiana University 
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.