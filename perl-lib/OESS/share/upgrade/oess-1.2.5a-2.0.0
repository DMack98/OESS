#!/usr/bin/perl
#-------------------------------------------------------------------
#----- OESS 1.2.5a - 2.0.0 upgrade module                         
#-----                                                               
#----- Copyright(C) 2010 The Trustees of Indiana University          
#--------------------------------------------------------------------
#----- $HeadURL: $                                                   
#----- $Id: $                                                        
#-----                                                               
#----- This is run when upgrading the database from     
#----- version 1.2.5a to version 2.0.0                               
#-------------------------------------------------------------------- 

use strict;
use warnings;
use OESS::Database;

my $prev_version = "1.2.5a";
my $version = "2.0.0";

sub main{
    print "*******************************************************************\n";
    print "*********             OESS DB UPGRADE           ************\n";
    print "*******************************************************************\n";
    print "********* This will upgrade from $prev_version to $version **********\n";
    print "********* of the OESS DB any other version will not work ************\n";
    
    continue_parameter("Do you wish to continue");
    
    my $dbq = new OESS::Database();
    my $current_version = $dbq->get_oess_schema_version();    
    if($current_version eq $prev_version){
        $dbq->{'dbh'}->begin_work();
        upgrade($dbq);
        $dbq->{'dbh'}->commit();
    } else{
        print "Wrong version of OESS DB\n";
        print "This script only upgrades from version $prev_version to $version\n";
        exit;
    }
    
    print STDERR "Upgrade Successful!!\n";
}


sub upgrade{
    my $dbq = shift;
    my $term = shift;
    my $dbh = $dbq->{'dbh'};
    my $str;
    my $sth;

    $dbh->do("CREATE TABLE CREATE TABLE `vrf` (  `vrf_id` int(10) NOT NULL AUTO_INCREMENT,  `name` varchar(255) NOT NULL,  `description` varchar(255) NOT NULL,  `workgroup_id` int(10) NOT NULL,  `state` enum('active','decom') DEFAULT NULL,  `created` int(10) NOT NULL,  `created_by` int(10) NOT NULL,  `last_modified` int(10) NOT NULL,  `last_modified_by` int(10) NOT NULL,  `local_asn` int(10) NOT NULL,  PRIMARY KEY (`vrf_id`),  KEY `workgroup_id` (`workgroup_id`),  KEY `created_by` (`created_by`),  KEY `last_modified_by` (`last_modified_by`),  CONSTRAINT `vrf_ibfk_3` FOREIGN KEY (`last_modified_by`) REFERENCES `user` (`user_id`),  CONSTRAINT `vrf_ibfk_1` FOREIGN KEY (`workgroup_id`) REFERENCES `workgroup` (`workgroup_id`),  CONSTRAINT `vrf_ibfk_2` FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`))");
    $dbh->do("CREATE TABLE `vrf_ep` (  `vrf_ep_id` int(11) NOT NULL AUTO_INCREMENT,  `inner_tag` int(10) DEFAULT NULL,  `tag` int(10) DEFAULT NULL,  `bandwidth` int(10) DEFAULT NULL,  `vrf_id` int(10) DEFAULT NULL,  `interface_id` int(10) NOT NULL,  `state` enum('active','decom') DEFAULT NULL,  `unit` int(11) DEFAULT NULL,  PRIMARY KEY (`vrf_ep_id`),  KEY `vrf_id` (`vrf_id`),  KEY `interface_id` (`interface_id`),  CONSTRAINT `vrf_ep_ibfk_1` FOREIGN KEY (`vrf_id`) REFERENCES `vrf` (`vrf_id`),  CONSTRAINT `vrf_ep_ibfk_2` FOREIGN KEY (`interface_id`) REFERENCES `interface` (`interface_id`))");
    $dbh->do(" CREATE TABLE `vrf_ep_peer` (  `vrf_ep_peer_id` int(10) NOT NULL AUTO_INCREMENT,  `peer_ip` varchar(255) NOT NULL,  `peer_asn` int(10) NOT NULL,  `vrf_ep_id` int(11) DEFAULT NULL,  `state` enum('active','decom') DEFAULT NULL,  `local_ip` varchar(255) DEFAULT NULL,  `md5_key` varchar(255) DEFAULT NULL,  `ip_version` enum('ipv4','ipv6') DEFAULT NULL,  `operational_state` int(1) DEFAULT NULL,  PRIMARY KEY (`vrf_ep_peer_id`),  KEY `vrf_ep_id` (`vrf_ep_id`),  CONSTRAINT `vrf_ep_peer_ibfk_1` FOREIGN KEY (`vrf_ep_id`) REFERENCES `vrf_ep` (`vrf_ep_id`))");

    $dbh->do("CREATE TABLE cloud_connection_vrf_ep (cloud_connection_vrf_ep_id int(11) NOT NULL AUTO_INCREMENT,  vrf_ep_id int(11) DEFAULT NULL, cloud_account_id varchar(255) NOT NULL, cloud_connection_id varchar(255) NOT NULL,  PRIMARY KEY (`cloud_connection_vrf_ep_id`),  KEY vrf_ep_id (vrf_ep_id),  CONSTRAINT cloud_connection_vrf_ep_ibfk_1 FOREIGN KEY (vrf_ep_id) REFERENCES vrf_ep (vrf_ep_id) ON DELETE CASCADE) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1");

    $dbh->do("CREATE TABLE `entity` (  `entity_id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) DEFAULT NULL,  `description` text,  `logo_url` varchar(255) DEFAULT NULL,  `url` varchar(255) DEFAULT NULL,  PRIMARY KEY (`entity_id`))");

    $dbh->do("CREATE TABLE `entity_hierarchy` (  `entity_parent_id` int(11) NOT NULL,  `entity_child_id` int(11) NOT NULL,  KEY `entity_parent` (`entity_parent_id`),  KEY `entity_child` (`entity_child_id`))"); 
    $dbh->do("alter table interface add column cloud_interconnect_type varchar(255)");
    $dbh->do("alter table interface add column cloud_interconnect_id varchar(255)");
    $dbh->do("alter table interface_acl add column entity_id int(11)");
    
    # Done with the rest of the upgrade update our version
    $str = "update oess_version set version = '$version'";
    $sth = $dbh->prepare($str) or die "Unable to prepare version update \n";
    $sth->execute() or die "Unable to update version\n";
}

main();

sub continue_parameter {
    my $name = shift;

    print "$name [y/n]: ";
    my $yes_or_no = <>;
    chomp($yes_or_no);

    exit(0) if ($yes_or_no !~ /y/i || $yes_or_no =~ /n/i);
}

sub required_parameter {
    my $name = shift;

    while (1) {
	print "$name (required): ";
        my $response = <>;
	chomp($response);

        return $response if ($response);

	print "\nThis option is required!\n\n";
    }
}
